{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PDM Multirun \u00a4 A PDM plugin to run a command on multiple Python versions. Installation \u00a4 With pipx : pipx install pdm pipx inject pdm pdm-multirun With PDM : pdm self add pdm-multirun Usage \u00a4 This plugin adds a multirun command to PDM. The command accepts the same parameters as the run command, with an additional -i , --interpreters , --versions parameter that allows to specify the interpreters to use. pdm multirun pytest tests/ To specify interpreters, pass a comma-separated string of Python versions: pdm multirun -i 3 .10,3.11 pytest tests/ By default, PDM Multirun reads Python versions from the PDM_MULTIRUN_VERSIONS environment variable. It is a string {major}.{minor} versions that can be found and called by PDM. # comma-separated is accepted as well export PDM_MULTIRUN_VERSIONS = \"3.7 3.8 3.9 3.10 3.11\" pdm multirun pytest tests/ PDM Multirun sets the PDM_MULTIRUN=1 environment variable when running the specified command. You can use it to decide if you should, for example, print the current Python version in the output of the command: import os import sys MULTIRUN = os . getenv ( \"PDM_MULTIRUN\" , \"0\" ) == \"1\" if MULTIRUN : py = f \" { sys . version_info [ 0 ] } . { sys . version_info [ 1 ] } \" # 3.8, 3.9, etc. ... # use `py` string accordingly","title":"Overview"},{"location":"#pdm-multirun","text":"A PDM plugin to run a command on multiple Python versions.","title":"PDM Multirun"},{"location":"#installation","text":"With pipx : pipx install pdm pipx inject pdm pdm-multirun With PDM : pdm self add pdm-multirun","title":"Installation"},{"location":"#usage","text":"This plugin adds a multirun command to PDM. The command accepts the same parameters as the run command, with an additional -i , --interpreters , --versions parameter that allows to specify the interpreters to use. pdm multirun pytest tests/ To specify interpreters, pass a comma-separated string of Python versions: pdm multirun -i 3 .10,3.11 pytest tests/ By default, PDM Multirun reads Python versions from the PDM_MULTIRUN_VERSIONS environment variable. It is a string {major}.{minor} versions that can be found and called by PDM. # comma-separated is accepted as well export PDM_MULTIRUN_VERSIONS = \"3.7 3.8 3.9 3.10 3.11\" pdm multirun pytest tests/ PDM Multirun sets the PDM_MULTIRUN=1 environment variable when running the specified command. You can use it to decide if you should, for example, print the current Python version in the output of the command: import os import sys MULTIRUN = os . getenv ( \"PDM_MULTIRUN\" , \"0\" ) == \"1\" if MULTIRUN : py = f \" { sys . version_info [ 0 ] } . { sys . version_info [ 1 ] } \" # 3.8, 3.9, etc. ... # use `py` string accordingly","title":"Usage"},{"location":"changelog/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . 0.1.0 - 2022-12-05 \u00a4 Compare with first commit Features \u00a4 Support passing versions with --versions ( 5fd48a0 by Timoth\u00e9e Mazzucotelli). Support space and comma separated values for PDM_MULTIRUN_VERSIONS ( 77aa991 by Timoth\u00e9e Mazzucotelli). First version ( c4b669d by Timoth\u00e9e Mazzucotelli). Bug Fixes \u00a4 Unset cached environment earlier ( a42c2ed by Timoth\u00e9e Mazzucotelli). Code Refactoring \u00a4 Expect only versions on the CLI ( b68001f by Timoth\u00e9e Mazzucotelli).","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#010-2022-12-05","text":"Compare with first commit","title":"0.1.0 - 2022-12-05"},{"location":"changelog/#features","text":"Support passing versions with --versions ( 5fd48a0 by Timoth\u00e9e Mazzucotelli). Support space and comma separated values for PDM_MULTIRUN_VERSIONS ( 77aa991 by Timoth\u00e9e Mazzucotelli). First version ( c4b669d by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#bug-fixes","text":"Unset cached environment earlier ( a42c2ed by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#code-refactoring","text":"Expect only versions on the CLI ( b68001f by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00a4 Our Pledge \u00a4 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00a4 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00a4 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00a4 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00a4 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00a4 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Attribution"},{"location":"contributing/","text":"Contributing \u00a4 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Environment setup \u00a4 Nothing easier! Fork and clone the repository, then: cd pdm-multirun make setup Note If it fails for some reason, you'll need to install PDM manually. You can install it with: python3 -m pip install --user pipx pipx install pdm Now you can try running make setup again, or simply pdm install . You now have the dependencies installed. You can run the application with pdm run [ARGS...] . Run make help to see all the available actions! Tasks \u00a4 This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with pdm run duty TASK The Makefile detects if a virtual environment is activated, so make will work the same with the virtualenv activated or not. Development \u00a4 As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) if you updated the documentation or the project dependencies: run make docs-serve go to http://localhost:8000 and check that everything looks good follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this. Commit message convention \u00a4 Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15. Pull requests guidelines \u00a4 Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.","title":"Contributing"},{"location":"contributing/#environment-setup","text":"Nothing easier! Fork and clone the repository, then: cd pdm-multirun make setup Note If it fails for some reason, you'll need to install PDM manually. You can install it with: python3 -m pip install --user pipx pipx install pdm Now you can try running make setup again, or simply pdm install . You now have the dependencies installed. You can run the application with pdm run [ARGS...] . Run make help to see all the available actions!","title":"Environment setup"},{"location":"contributing/#tasks","text":"This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with pdm run duty TASK The Makefile detects if a virtual environment is activated, so make will work the same with the virtualenv activated or not.","title":"Tasks"},{"location":"contributing/#development","text":"As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) if you updated the documentation or the project dependencies: run make docs-serve go to http://localhost:8000 and check that everything looks good follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this.","title":"Development"},{"location":"contributing/#commit-message-convention","text":"Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15.","title":"Commit message convention"},{"location":"contributing/#pull-requests-guidelines","text":"Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Pull requests guidelines"},{"location":"credits/","text":"These projects were used to build pdm-multirun . Thank you! python | pdm | copier-pdm Runtime dependencies \u00a4 Project Summary Version (accepted) Version (last resolved) License blinker Fast, simple object-to-object and broadcast signaling 1.5 MIT License cachecontrol httplib2 caching for requests [filecache]>=0.12.11 0.12.11 Apache Software License cached-property A decorator for caching properties in classes. >=1.5.2; python_version < \"3.8\" 1.5.2 BSD certifi Python package for providing Mozilla's CA Bundle. 2022.9.24 MPL-2.0 charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <3,>=2 2.1.1 MIT commonmark Python parser for the CommonMark Markdown spec <0.10.0,>=0.9.0 0.9.1 BSD-3-Clause distlib Distribution utilities <1,>=0.3.6 0.3.6 Python license filelock A platform independent file lock. <4,>=3.4.1 3.8.1 Unlicense findpython A utility to find python versions on your system >=0.2.2 0.2.2 MIT idna Internationalized Domain Names in Applications (IDNA) <4,>=2.5 3.4 BSD License importlib-metadata Read metadata from Python packages >=3.6; python_version < \"3.10\" 4.13.0 Apache Software License installer A library for installing Python wheels. <0.6,>=0.5.1 0.5.1 MIT License lockfile Platform-independent file locking module >=0.9 0.12.2 MIT License packaging Core utilities for Python packages >=20.9 21.3 BSD-2-Clause or Apache-2.0 pdm A modern Python package and dependency manager supporting the latest PEP standards >=2 2.3.1 MIT platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a \"user data dir\". 2.5.4 MIT License pygments Pygments is a syntax highlighting package written in Python. <3.0.0,>=2.6.0 2.13.0 BSD License pyparsing pyparsing module - Classes and methods to define and execute parsing grammars !=3.0.5,>=2.0.2 3.0.9 MIT License pyproject-hooks Wrappers to call pyproject.toml-based build backend hooks. 1.0.0 MIT License python-dotenv Read key-value pairs from a .env file and set them as environment variables >=0.15 0.21.0 BSD-3-Clause requests Python HTTP for Humans. <3.0.0,>=2.0.1 2.28.1 Apache 2.0 requests-toolbelt A utility belt for advanced users of python-requests 0.10.1 Apache 2.0 resolvelib Resolve abstract dependencies into concrete ones <0.10,>=0.9 0.9.0 ISC License rich Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal >=12.3.0 12.6.0 MIT shellingham Tool to Detect Surrounding Shell >=1.3.2 1.5.0 ISC License tomli A lil' TOML parser >=1.1.0; python_version < \"3.11\" 2.0.1 MIT License tomlkit Style preserving TOML library <1,>=0.11.1 0.11.6 MIT typing-extensions Backported and Experimental Type Hints for Python 3.7+ ; python_version < \"3.8\" 4.4.0 Python Software Foundation License unearth A utility to fetch and download python packages >=0.6.0 0.6.2 MIT urllib3 HTTP library with thread-safe connection pooling, file post, and more. <1.27,>=1.21.1 1.26.13 MIT virtualenv Virtual Python Environment builder >=20 20.17.0 MIT zipp Backport of pathlib-compatible object wrapper for zip files >=0.5 3.11.0 MIT License Development dependencies \u00a4 Project Summary Version (accepted) Version (last resolved) License ansimarkup Produce colored terminal text with an xml-like markup ~=1.4 1.5.0 Revised BSD License astor Read/rewrite/write Python ASTs >=0.8 0.8.1 BSD-3-Clause attrs Classes Without Boilerplate >=19.2.0 22.1.0 MIT autoflake Removes unused imports and unused variables >=1.4 1.7.8 MIT bandit Security oriented static analyser for python code. >=1.7.3 1.7.4 Apache-2.0 license black The uncompromising code formatter. >=21.10b0 22.10.0 MIT License cached-property A decorator for caching properties in classes. ~=1.5; python_version < \"3.8\" 1.5.2 BSD certifi Python package for providing Mozilla's CA Bundle. >=2017.4.17 2022.9.24 MPL-2.0 charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <3,>=2 2.1.1 MIT click Composable command line interface toolkit >=8.0.0 8.1.3 BSD-3-Clause colorama Cross-platform colored terminal text. ; platform_system == \"Windows\" 0.4.6 BSD License coverage Code coverage measurement for Python [toml]>=5.2.1 6.5.0 Apache 2.0 darglint A utility for ensuring Google-style docstrings stay up to date with the source code. >=1.8 1.8.1 MIT dparse A parser for Python dependency files >=0.6.2 0.6.2 MIT license duty A simple task runner. >=0.7 0.7.0 ISC exceptiongroup Backport of PEP 654 (exception groups) >=1.0.0rc8; python_version < \"3.11\" 1.0.4 MIT License execnet execnet: rapid multi-Python deployment >=1.1 1.9.0 MIT failprint Run a command, print its output only if it fails. ~=0.8 0.8.0 ISC flake8 the modular source code checker: pep8 pyflakes and co >=4; python_version >= '3.8' 5.0.4 MIT flake8-bandit Automated security testing with bandit and flake8. >=2.1 4.1.1 MIT flake8-black flake8 plugin to call black as a code style validator >=0.2 0.3.5 MIT flake8-bugbear A plugin for flake8 finding likely bugs and design problems in your program. Contains warnings that don't belong in pyflakes and pycodestyle. >=21.9 22.10.27 MIT flake8-builtins Check for python builtins being used as variables or parameters. >=1.5 2.0.1 GPL version 2 flake8-comprehensions A flake8 plugin to help you write better list/set/dict comprehensions. >=3.7 3.10.1 MIT flake8-docstrings Extension for flake8 which uses pydocstyle to check docstrings >=1.6 1.6.0 MIT License flake8-plugin-utils The package provides base classes and utils for flake8 plugin writing <2.0.0,>=1.3.2 1.3.2 MIT flake8-polyfill Polyfill package for Flake8 plugins >=1.0.2 1.0.2 MIT flake8-pytest-style A flake8 plugin checking common style issues or inconsistencies with pytest-based tests. >=1.5 1.6.0 MIT flake8-string-format string format checker, plugin for flake8 >=0.3 0.3.0 MIT License flake8-tidy-imports A flake8 plugin that helps you write tidier imports. >=4.5 4.8.0 MIT flake8-variables-names A flake8 extension that helps to make more readable variables names >=0.0 0.0.5 MIT ghp-import Copy your docs directly to the gh-pages branch. >=1.0 2.1.0 Apache Software License git-changelog Automatic Changelog generator using Jinja2 templates. >=0.4 0.6.0 ISC gitdb Git Object Database <5,>=4.0.1 4.0.10 BSD License gitpython GitPython is a python library used to interact with Git repositories >=1.0.1 3.1.29 BSD griffe Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. >=0.24 0.24.1 ISC idna Internationalized Domain Names in Applications (IDNA) <4,>=2.5 3.4 BSD License importlib-metadata Read metadata from Python packages <5; python_version < '3.8' 4.13.0 Apache Software License iniconfig iniconfig: brain-dead simple config-ini parsing 1.1.1 MIT License isort A Python utility / library to sort Python imports. >=5.10 5.10.1 MIT jinja2 A very fast and expressive template engine. <4,>=2.11 3.1.2 BSD-3-Clause markdown Python implementation of Markdown. <4.0.0,>=3.3.3 3.3.7 BSD License markdown-callouts Markdown extension: a classier syntax for admonitions >=0.2 0.3.0 MIT markdown-exec Utilities to execute code blocks in Markdown files. >=0.5 1.0.0 ISC markupsafe Safely add untrusted strings to HTML/XML markup. >=2.0 2.1.1 BSD-3-Clause mccabe McCabe checker, plugin for flake8 <0.8.0,>=0.7.0 0.7.0 Expat license mergedeep A deep merge function for \ud83d\udc0d. >=1.3.4 1.3.4 MIT License mkdocs Project documentation with Markdown. >=1.3 1.4.2 BSD License mkdocs-coverage MkDocs plugin to integrate your coverage HTML report into your site. >=0.2 0.2.6 ISC mkdocs-gen-files MkDocs plugin to programmatically generate documentation pages during the build >=0.3 0.4.0 MIT mkdocs-literate-nav MkDocs plugin to specify the navigation in Markdown instead of YAML >=0.4 0.5.0 MIT mkdocs-material Documentation that simply works >=7.3 8.5.11 MIT License mkdocs-material-extensions Extension pack for Python Markdown and MkDocs Material. >=1.1 1.1.1 MIT License mkdocs-section-index MkDocs plugin to allow clickable sections that lead to an index page >=0.3 0.3.4 MIT mkdocstrings Automatic documentation from sources, for MkDocs. [python]>=0.18 0.19.0 ISC License (ISCL) mkdocstrings-python A Python handler for mkdocstrings. >=0.5.2 0.8.2 ISC mypy Optional static typing for Python >=0.910 0.991 MIT License mypy-extensions Experimental type system extensions for programs checked with the mypy typechecker. >=0.4.3 0.4.3 MIT License packaging Core utilities for Python packages >=20.5 21.3 BSD-2-Clause or Apache-2.0 pathspec Utility library for gitignore style pattern matching of file paths. >=0.9.0 0.10.2 MPL 2.0 pbr Python Build Reasonableness !=2.1.0,>=2.0.0 5.11.0 Apache Software License pep8-naming Check PEP-8 naming conventions, plugin for flake8 >=0.12 0.13.2 Expat license platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a \"user data dir\". >=2 2.5.4 MIT License pluggy plugin and hook calling mechanisms for python <2.0,>=0.12 1.0.0 MIT ptyprocess Run a subprocess in a pseudo terminal ~=0.6; sys_platform != \"win32\" 0.7.0 ISC License (ISCL) pycodestyle Python style guide checker <2.10.0,>=2.9.0 2.9.1 Expat license pydocstyle Python docstring style checker >=2.1 6.1.1 MIT pyflakes passive checker of Python programs <3,>=1.1.0 2.5.0 MIT pygments Pygments is a syntax highlighting package written in Python. >=2.12 2.13.0 BSD License pymdown-extensions Extension pack for Python Markdown. >=9 9.9 MIT License pyparsing pyparsing module - Classes and methods to define and execute parsing grammars !=3.0.5,>=2.0.2 3.0.9 MIT License pytest pytest: simple powerful testing with Python >=6.2 7.2.0 MIT pytest-cov Pytest plugin for measuring coverage. >=3.0 4.0.0 MIT pytest-randomly Pytest plugin to randomly order tests and control random.seed. >=3.10 3.12.0 MIT pytest-xdist pytest xdist plugin for distributed testing, most importantly across multiple CPUs >=2.4 3.1.0 MIT python-dateutil Extensions to the standard Python datetime module >=2.8.1 2.8.2 Dual License pyyaml YAML parser and emitter for Python >=5.1 6.0 MIT pyyaml-env-tag A custom YAML tag for referencing environment variables in YAML files. >=0.1 0.1 MIT License requests Python HTTP for Humans. >=2.26 2.28.1 Apache 2.0 ruamel.yaml ruamel.yaml is a YAML parser/emitter that supports roundtrip preservation of comments, seq/map flow style, and map key order >=0.17.21 0.17.21 MIT license ruamel.yaml.clib C version of reader, parser and emitter for ruamel.yaml derived from libyaml >=0.2.6; platform_python_implementation == \"CPython\" and python_version < \"3.11\" 0.2.7 MIT safety Checks installed dependencies for known vulnerabilities and licenses. >=2 2.3.3 MIT license semver Python helper for Semantic Versioning (http://semver.org/) ~=2.13 2.13.0 BSD setuptools Easily download, build, install, upgrade, and uninstall Python packages >=19.3 65.6.3 MIT License six Python 2 and 3 compatibility utilities >=1.5 1.16.0 MIT smmap A pure Python implementation of a sliding window memory map manager <6,>=3.0.1 5.0.0 BSD snowballstemmer This package provides 29 stemmers for 28 languages generated from Snowball algorithms. 2.2.0 BSD-3-Clause stevedore Manage dynamic plugins for Python applications >=1.20.0 3.5.2 Apache Software License toml Python Library for Tom's Obvious, Minimal Language >=0.10 0.10.2 MIT tomli A lil' TOML parser >=2.0.1; python_version < \"3.11\" 2.0.1 MIT License typed-ast a fork of Python 2 and 3 ast modules with type comment support >=1.4.2; python_version < \"3.8\" and implementation_name == \"cpython\" 1.5.4 Apache License 2.0 types-markdown Typing stubs for Markdown >=3.3 3.4.2.1 Apache-2.0 license types-toml Typing stubs for toml >=0.10 0.10.8.1 Apache-2.0 license typing-extensions Backported and Experimental Type Hints for Python 3.7+ >=3.10.0.0; python_version < \"3.10\" 4.4.0 Python Software Foundation License urllib3 HTTP library with thread-safe connection pooling, file post, and more. <1.27,>=1.21.1 1.26.13 MIT watchdog Filesystem events monitoring >=2.0 2.1.9 Apache License 2.0 wps-light The strictest and most opinionated python linter ever (lighter fork). >=0.15 0.16.1 MIT zipp Backport of pathlib-compatible object wrapper for zip files >=0.5 3.11.0 MIT License More credits from the author","title":"Credits"},{"location":"license/","text":"ISC License Copyright (c) 2022, Timoth\u00e9e Mazzucotelli Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.","title":"License"},{"location":"reference/SUMMARY/","text":"pdm_multirun plugin","title":"SUMMARY"},{"location":"reference/pdm_multirun/","text":"PDM Multirun package. A PDM plugin to run a command on multiple Python versions.","title":"pdm_multirun"},{"location":"reference/pdm_multirun/plugin/","text":"PDM Multirun plugin. MultirunCommand \u00a4 Bases: RunCommand Run a command under multiple Python versions. Source code in pdm_multirun/plugin.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 class MultirunCommand ( RunCommand ): \"\"\"Run a command under multiple Python versions.\"\"\" def add_arguments ( self , parser : argparse . ArgumentParser ) -> None : # noqa: D102 super () . add_arguments ( parser ) parser . add_argument ( \"-i\" , \"--interpreters\" , \"--versions\" , help = \"Comma-separated list of Python versions to run the command with\" , type = _interpreters , ) def handle ( self , project : Project , options : argparse . Namespace ) -> None : # noqa: D102 old_python = str ( project . environment . interpreter . path ) project . core . ui . echo ( f \"Current interpreter: { old_python } \" , verbosity = termui . Verbosity . DETAIL ) for python_version in options . interpreters or PYTHON_VERSIONS : self . _use ( project , options , python_version ) try : super () . handle ( project , options ) except SystemExit as exit : if exit . code : self . _use ( project , options , old_python ) raise project . core . ui . echo ( f \"Restoring interpreter: { old_python } \" , verbosity = termui . Verbosity . DETAIL ) self . _use ( project , options , old_python ) def _use ( self , project : Project , options : argparse . Namespace , python : str ) -> None : old_echo = project . core . ui . echo if not options . verbose : project . core . ui . echo = lambda * args , ** kwargs : None # type: ignore[assignment] # unset cached environment project . environment = None # type: ignore[assignment] try : # noqa: WPS501 actions . do_use ( project , python = python , first = True , ignore_remembered = False , hooks = HookManager ( project , skip = options . skip ), ) finally : project . core . ui . echo = old_echo # type: ignore[assignment]","title":"plugin"},{"location":"reference/pdm_multirun/plugin/#pdm_multirun.plugin.MultirunCommand","text":"Bases: RunCommand Run a command under multiple Python versions. Source code in pdm_multirun/plugin.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 class MultirunCommand ( RunCommand ): \"\"\"Run a command under multiple Python versions.\"\"\" def add_arguments ( self , parser : argparse . ArgumentParser ) -> None : # noqa: D102 super () . add_arguments ( parser ) parser . add_argument ( \"-i\" , \"--interpreters\" , \"--versions\" , help = \"Comma-separated list of Python versions to run the command with\" , type = _interpreters , ) def handle ( self , project : Project , options : argparse . Namespace ) -> None : # noqa: D102 old_python = str ( project . environment . interpreter . path ) project . core . ui . echo ( f \"Current interpreter: { old_python } \" , verbosity = termui . Verbosity . DETAIL ) for python_version in options . interpreters or PYTHON_VERSIONS : self . _use ( project , options , python_version ) try : super () . handle ( project , options ) except SystemExit as exit : if exit . code : self . _use ( project , options , old_python ) raise project . core . ui . echo ( f \"Restoring interpreter: { old_python } \" , verbosity = termui . Verbosity . DETAIL ) self . _use ( project , options , old_python ) def _use ( self , project : Project , options : argparse . Namespace , python : str ) -> None : old_echo = project . core . ui . echo if not options . verbose : project . core . ui . echo = lambda * args , ** kwargs : None # type: ignore[assignment] # unset cached environment project . environment = None # type: ignore[assignment] try : # noqa: WPS501 actions . do_use ( project , python = python , first = True , ignore_remembered = False , hooks = HookManager ( project , skip = options . skip ), ) finally : project . core . ui . echo = old_echo # type: ignore[assignment]","title":"MultirunCommand"},{"location":"coverage/","text":"article h1, article > a, .md-sidebar--secondary { display: none !important; } var coviframe = document.getElementById(\"coviframe\"); function resizeIframe() { coviframe.style.height = coviframe.contentWindow.document.documentElement.offsetHeight + 'px'; } coviframe.contentWindow.document.body.onclick = function() { coviframe.contentWindow.location.reload(); }","title":"Coverage report"}]}