{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"PDM Multirun","text":"<p>A PDM plugin to run a command on multiple Python versions.</p> <p> Looking for maintainers. I do not use PDM nor this plugin nowadays, and don't have the time to fix CI failures or upgrade the code base to support new versions of PDM. If you wish to be added as a collaborator on this project in order to help maintaining it, or if you wish the repository to be transfered to you, please open an issue or discussion, with enough information about you for me to trust you </p>"},{"location":"#installation","title":"Installation","text":"<p>With <code>pipx</code>:</p> <pre><code>pipx install pdm\npipx inject pdm pdm-multirun\n</code></pre> <p>With PDM:</p> <pre><code>pdm self add pdm-multirun\n</code></pre> <p>As a local-only plugin:</p> <pre><code># pyproject.toml\n[tool.pdm]\nplugins = [\n    \"pdm-multirun\",\n]\n</code></pre> <pre><code>pdm install --plugins\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>This plugin adds a <code>multirun</code> command to PDM. The command accepts the same parameters as the <code>run</code> command, with an additional <code>-i</code>, <code>--interpreters</code>, <code>--versions</code> parameter that allows to specify the interpreters to use.</p> <pre><code>pdm multirun pytest tests/\n</code></pre> <p>To specify interpreters, pass a comma-separated string of Python versions:</p> <pre><code>pdm multirun -i 3.10,3.11 pytest tests/\n</code></pre> <p>If you use virtual environments instead, pass their names to the <code>--interpreters</code> option and add the <code>-e</code>, <code>--venvs</code> flag:</p> <pre><code>pdm multirun -ei 3.10,3.11 pytest tests/\n</code></pre> <pre><code>pdm multirun -ei tests38,tests39 pytest tests/\n</code></pre> <p>You can set PDM Multirun to use virtual environments by default by setting the <code>PDM_MULTIRUN_USE_VENVS</code> environment variable to <code>1</code>.</p> <p>By default, PDM Multirun reads Python versions (or venv names) from the <code>PDM_MULTIRUN_VERSIONS</code> environment variable. It is a string of <code>{major}.{minor}</code> versions (or venv names), separated by spaces, that can be found and called by PDM.</p> <pre><code>export PDM_MULTIRUN_VERSIONS=\"3.8 3.9 3.10 3.11 3.12\"\npdm multirun pytest tests/\n</code></pre> <pre><code>export PDM_MULTIRUN_VERSIONS=\"tests38 tests39 tests310\"\npdm multirun pytest tests/\n</code></pre> <p>PDM Multirun sets a number of environment variables that can be used by code run in each version.</p> <ul> <li><code>PDM_MULTIRUN</code> set to <code>1</code> whenever PDM Multirun is being used.</li> <li><code>PDM_MULTIRUN_CURRENT</code> is set to the name of the current interpreter or   virtual environment (such as that passed using <code>-i</code> or   <code>PDM_MULTIRUN_VERSIONS</code>).</li> </ul> <p>You can use these variables, for example, to output metadata about the current Python version or interpreter, like in the example below, which if invoked by PDM Multirun, would start by printing the name of the virtual environment or interpeter, and the version of Python being used.</p> <p>script.py <pre><code>import os\nimport sys\n\nMULTIRUN = os.getenv(\"PDM_MULTIRUN\", \"0\") == \"1\"\n\nif MULTIRUN:\n    int_name = os.getenv('PDM_MULTIRUN_CURRENT', '')\n    py = f\"{int_name}: {sys.version_info[0]}.{sys.version_info[1]}\"\n\n    print(f\"{py} - Hello from python! \ud83d\udc4b\")\n\n# continue script as required...\n</code></pre></p> <p>In a scenario where you had two virtual environments, <code>tests38</code> and <code>tests39</code>, and saved this script in a file named <code>example.py</code>, running the command:</p> <pre><code>pdm multirun -e tests38,tests39 python example.py\n</code></pre> <p>Would output the text below.</p> <pre><code>tests38: 3.8 - Hello from python! \ud83d\udc4b\ntests39: 3.9 - Hello from python! \ud83d\udc4b\n</code></pre> <p>PDM Multirun successively runs the <code>pdm use</code> then <code>pdm run</code> internal actions. By default, if PDM cannot \"use\" an interpreter/venv, it continues with the next.</p> <pre><code># will continue with 3.8 even if 3.7 is not available\npdm multirun -i 3.7,3.8 pytest tests/\n</code></pre> <p>You can tell it to fail instead with the <code>-f</code>, <code>--fail-fast</code> flag:</p> <pre><code># will stop at 3.7 if it's not available\npdm multirun -fi 3.7,3.8 pytest tests/\n</code></pre> <p>If the command you run fails on a Python version, PDM Multirun stops there. In any case, PDM Multirun will restore the Python interpreter saved in <code>.pdm-python</code> (through the <code>pdm use</code> command) before exiting.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#111-2024-07-02","title":"1.1.1 - 2024-07-02","text":"<p>Compare with 1.1.0</p>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Support PDM 2.16 API (181f9f2 by Pierre Marijon). Issue-11, PR-12</li> </ul>"},{"location":"changelog/#110-2023-09-21","title":"1.1.0 - 2023-09-21","text":"<p>Compare with 1.0.0</p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Add <code>PDM_MULTIRUN_CURRENT</code> environment variable (a0c1b18 by Dom Weldon). PR #5</li> </ul>"},{"location":"changelog/#100-2023-08-20","title":"1.0.0 - 2023-08-20","text":"<p>Compare with 0.4.0</p>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Support environment variable to always use venvs: <code>PDM_MULTIRUN_USE_VENVS=1</code> (16c647c by Dom Weldon). Issue #4, PR #3</li> </ul>"},{"location":"changelog/#040-2023-06-26","title":"0.4.0 - 2023-06-26","text":"<p>Compare with 0.3.1</p>"},{"location":"changelog/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Drop support for Python 3.7 (EOL 2023/06/27)</li> </ul>"},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Add support for virtual environments (f2b8381 by Timoth\u00e9e Mazzucotelli). Issue #1</li> </ul>"},{"location":"changelog/#031-2023-06-13","title":"0.3.1 - 2023-06-13","text":"<p>Compare with 0.3.0</p>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Support PDM 2.7.4 (2cd1d14 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#030-2023-06-08","title":"0.3.0 - 2023-06-08","text":"<p>Compare with 0.2.0</p>"},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>Add <code>fail-fast</code> option (8ca1604 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#020-2022-12-05","title":"0.2.0 - 2022-12-05","text":"<p>Compare with 0.1.0</p>"},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>Set <code>PDM_MULTIRUN=1</code> when running (67146bd by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Fix splitting <code>PDM_MULTIRUN_VERSIONS</code> environment variable (d560a99 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#010-2022-12-05","title":"0.1.0 - 2022-12-05","text":"<p>Compare with first commit</p>"},{"location":"changelog/#features_5","title":"Features","text":"<ul> <li>Support passing versions with <code>--versions</code> (5fd48a0 by Timoth\u00e9e Mazzucotelli).</li> <li>Support space and comma separated values for <code>PDM_MULTIRUN_VERSIONS</code> (77aa991 by Timoth\u00e9e Mazzucotelli).</li> <li>First version (c4b669d by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Unset cached environment earlier (a42c2ed by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>Expect only versions on the CLI (b68001f by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at pawamoy@pm.me. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd pdm-multirun\nmake setup\n</code></pre> <p>Note</p> <p> If it fails for some reason, you'll need to install PDM manually.</p> <p>You can install it with:</p> <pre><code>python3 -m pip install --user pipx\npipx install pdm\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>pdm install</code>.</p> <p>You now have the dependencies installed.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you run the task directly with <code>pdm run duty TASK</code>.</p> <p>The Makefile detects if a virtual environment is activated, so <code>make</code> will work the same with the virtualenv activated or not.</p> <p>If you work in VSCode, we provide an action to configure VSCode for the project.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build pdm-multirun. Thank you!</p> <p><code>python</code> | <code>pdm</code> | <code>copier-pdm</code></p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>blinker</code> Fast, simple object-to-object and broadcast signaling <code>1.8.2</code> MIT License <code>dep-logic</code> Python dependency specifications supporting logical operations <code>&lt;1.0,&gt;=0.2.0</code> <code>0.3.3</code> Apache-2.0 <code>distlib</code> Distribution utilities <code>&lt;1,&gt;=0.3.7</code> <code>0.3.8</code> PSF-2.0 <code>filelock</code> A platform independent file lock. <code>&gt;=3.13</code> <code>3.15.4</code> The Unlicense (Unlicense) <code>findpython</code> A utility to find python versions on your system <code>&lt;1.0.0a0,&gt;=0.6.0</code> <code>0.6.1</code> MIT <code>hishel</code> Persistent cache implementation for httpx and httpcore <code>&lt;0.1.0,&gt;=0.0.24</code> <code>0.0.29</code> BSD License <code>httpx</code> The next generation HTTP client. <code>[socks]&lt;1,&gt;0.20</code> <code>0.27.0</code> BSD License <code>importlib-metadata</code> Read metadata from Python packages <code>&gt;=3.6; python_version &lt; \"3.10\"</code> <code>8.0.0</code> ? <code>importlib-resources</code> Read resources from Python packages <code>&gt;=5; python_version &lt; \"3.9\"</code> <code>6.4.0</code> ? <code>installer</code> A library for installing Python wheels. <code>&lt;0.8,&gt;=0.7</code> <code>0.7.0</code> MIT License <code>markdown-it-py</code> Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0</code> <code>3.0.0</code> MIT License <code>mdurl</code> Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License <code>msgpack</code> MessagePack serializer <code>&gt;=1.0</code> <code>1.0.8</code> Apache 2.0 <code>packaging</code> Core utilities for Python packages <code>!=22.0,&gt;=20.9</code> <code>24.1</code> BSD License <code>pbs-installer</code> Installer for Python Build Standalone <code>&gt;=2024.4.18</code> <code>2024.4.24</code> MIT <code>pdm</code> A modern Python package and dependency manager supporting the latest PEP standards <code>&gt;=2</code> <code>2.16.1</code> MIT <code>platformdirs</code> A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>4.2.2</code> MIT License <code>pygments</code> Pygments is a syntax highlighting package written in Python. <code>&lt;3.0.0,&gt;=2.13.0</code> <code>2.18.0</code> BSD-2-Clause <code>pyproject-hooks</code> Wrappers to call pyproject.toml-based build backend hooks. <code>1.1.0</code> MIT License <code>python-dotenv</code> Read key-value pairs from a .env file and set them as environment variables <code>&gt;=0.15</code> <code>1.0.1</code> BSD-3-Clause <code>resolvelib</code> Resolve abstract dependencies into concrete ones <code>&gt;=1.0.1</code> <code>1.0.1</code> ISC License <code>rich</code> Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>&gt;=12.3.0</code> <code>13.7.1</code> MIT <code>shellingham</code> Tool to Detect Surrounding Shell <code>&gt;=1.3.2</code> <code>1.5.4</code> ISC License <code>socksio</code> Sans-I/O implementation of SOCKS4, SOCKS4A, and SOCKS5. <code>==1.*</code> <code>1.0.0</code> MIT License <code>tomli</code> A lil' TOML parser <code>&gt;=1.1.0; python_version &lt; \"3.11\"</code> <code>2.0.1</code> ? <code>tomlkit</code> Style preserving TOML library <code>&lt;1,&gt;=0.11.1</code> <code>0.12.5</code> MIT <code>truststore</code> Verify certificates using native system trust stores <code>; python_version &gt;= \"3.10\"</code> <code>0.9.1</code> MIT License <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.8+ <code>&lt;5.0,&gt;=4.0.0; python_version &lt; \"3.9\"</code> <code>4.12.2</code> Python Software Foundation License <code>unearth</code> A utility to fetch and download python packages <code>&gt;=0.15.0</code> <code>0.16.0</code> MIT <code>virtualenv</code> Virtual Python Environment builder <code>&gt;=20</code> <code>20.26.3</code> MIT License <code>zipp</code> Backport of pathlib-compatible object wrapper for zip files <code>&gt;=0.5</code> <code>3.19.2</code> ?"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>annotated-types</code> Reusable constraint types to use with typing.Annotated <code>&gt;=0.4.0</code> <code>0.7.0</code> MIT License <code>ansimarkup</code> Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License <code>appdirs</code> A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=1.4</code> <code>1.4.4</code> MIT <code>astunparse</code> An AST unparser for Python <code>&gt;=1.6; python_version &lt; \"3.9\"</code> <code>1.6.3</code> ? <code>authlib</code> The ultimate Python library in building OAuth and OpenID Connect servers and clients. <code>&gt;=1.2.0</code> <code>1.3.1</code> BSD-3-Clause <code>babel</code> Internationalization utilities <code>~=2.10</code> <code>2.15.0</code> BSD-3-Clause <code>black</code> The uncompromising code formatter. <code>&gt;=23.9</code> <code>24.4.2</code> MIT <code>blacken-docs</code> Run Black on Python code blocks in documentation files. <code>&gt;=1.16</code> <code>1.18.0</code> MIT License <code>certifi</code> Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2024.6.2</code> MPL-2.0 <code>cffi</code> Foreign Function Interface for Python calling C code. <code>&gt;=1.12; platform_python_implementation != \"PyPy\"</code> <code>1.16.0</code> MIT <code>charset-normalizer</code> The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&lt;4,&gt;=2</code> <code>3.3.2</code> MIT <code>click</code> Composable command line interface toolkit <code>&gt;=8.0.0</code> <code>8.1.7</code> BSD-3-Clause <code>colorama</code> Cross-platform colored terminal text. <code>; platform_system == \"Windows\"</code> <code>0.4.6</code> BSD License <code>coverage</code> Code coverage measurement for Python <code>[toml]&gt;=5.2.1</code> <code>7.5.4</code> Apache-2.0 <code>cryptography</code> cryptography is a package which provides cryptographic recipes and primitives to Python developers. <code>42.0.8</code> Apache-2.0 OR BSD-3-Clause <code>csscompressor</code> A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD <code>dparse</code> A parser for Python dependency files <code>&gt;=0.6.4b0</code> <code>0.6.4b0</code> MIT license <code>duty</code> A simple task runner. <code>&gt;=0.10</code> <code>1.4.0</code> ISC <code>eval-type-backport</code> Like <code>typing._eval_type</code>, but lets older Python versions use newer typing features. <code>; python_version &lt; \"3.10\"</code> <code>0.2.0</code> ? <code>exceptiongroup</code> Backport of PEP 654 (exception groups) <code>&gt;=1.0.0rc8; python_version &lt; \"3.11\"</code> <code>1.2.1</code> ? <code>execnet</code> execnet: rapid multi-Python deployment <code>&gt;=2.1</code> <code>2.1.1</code> MIT License <code>failprint</code> Run a command, print its output only if it fails. <code>!=1.0.0,&gt;=0.11</code> <code>1.0.2</code> ISC <code>ghp-import</code> Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License <code>git-changelog</code> Automatic Changelog generator using Jinja2 templates. <code>&gt;=2.3</code> <code>2.5.2</code> ISC <code>gitdb</code> Git Object Database <code>&lt;5,&gt;=4.0.1</code> <code>4.0.11</code> BSD License <code>gitpython</code> GitPython is a Python library used to interact with Git repositories <code>3.1.43</code> BSD-3-Clause <code>griffe</code> Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.47</code> <code>0.47.0.1.2.0</code> ISC <code>htmlmin2</code> An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD <code>idna</code> Internationalized Domain Names in Applications (IDNA) <code>&lt;4,&gt;=2.5</code> <code>3.7</code> BSD License <code>importlib-metadata</code> Read metadata from Python packages <code>&gt;=4.4; python_version &lt; \"3.10\"</code> <code>8.0.0</code> ? <code>iniconfig</code> brain-dead simple config-ini parsing <code>2.0.0</code> MIT License <code>jinja2</code> A very fast and expressive template engine. <code>&lt;4,&gt;=2.11</code> <code>3.1.4</code> BSD License <code>jsmin</code> JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License <code>markdown</code> Python implementation of John Gruber's Markdown. <code>&gt;=3.3.3</code> <code>3.6</code> BSD License <code>markdown-callouts</code> Markdown extension: a classier syntax for admonitions <code>&gt;=0.3</code> <code>0.4.0</code> MIT License <code>markdown-exec</code> Utilities to execute code blocks in Markdown files. <code>&gt;=1.7</code> <code>1.9.3</code> ISC <code>markdown-it-py</code> Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0</code> <code>3.0.0</code> MIT License <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>2.1.5</code> BSD-3-Clause <code>marshmallow</code> A lightweight library for converting complex datatypes to and from native Python datatypes. <code>&gt;=3.15.0</code> <code>3.21.3</code> MIT License <code>mdurl</code> Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License <code>mergedeep</code> A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;=1.5</code> <code>1.6.0</code> BSD License <code>mkdocs-coverage</code> MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1.0</code> <code>1.1.0</code> ISC <code>mkdocs-gen-files</code> MkDocs plugin to programmatically generate documentation pages during the build <code>&gt;=0.5</code> <code>0.5.0</code> MIT License <code>mkdocs-get-deps</code> MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT License <code>mkdocs-git-committers-plugin-2</code> An MkDocs plugin to create a list of contributors on the page. The git-committers plugin will seed the template context with a list of GitHub or GitLab committers and other useful GIT info such as last modified date <code>&gt;=1.2</code> <code>2.3.0</code> MIT <code>mkdocs-literate-nav</code> MkDocs plugin to specify the navigation in Markdown instead of YAML <code>&gt;=0.6</code> <code>0.6.1</code> MIT License <code>mkdocs-material</code> Documentation that simply works <code>&gt;=9.4</code> <code>9.5.27</code> MIT License <code>mkdocs-material-extensions</code> Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT License <code>mkdocs-minify-plugin</code> An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.7</code> <code>0.8.0</code> MIT <code>mkdocstrings</code> Automatic documentation from sources, for MkDocs. <code>[python]&gt;=0.23</code> <code>0.25.1</code> ISC <code>mkdocstrings-python</code> A Python handler for mkdocstrings. <code>&gt;=0.5.2</code> <code>1.10.5.1.8.3</code> ISC <code>mypy</code> Optional static typing for Python <code>&gt;=1.5</code> <code>1.10.1</code> MIT <code>mypy-extensions</code> Type system extensions for programs checked with the mypy type checker. <code>&gt;=0.4.3</code> <code>1.0.0</code> MIT License <code>packaging</code> Core utilities for Python packages <code>&gt;=22.0</code> <code>24.1</code> BSD License <code>paginate</code> Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.6</code> MIT <code>pathspec</code> Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) <code>platformdirs</code> A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=2</code> <code>4.2.2</code> MIT License <code>pluggy</code> plugin and hook calling mechanisms for python <code>&lt;2.0,&gt;=1.5</code> <code>1.5.0</code> MIT <code>ptyprocess</code> Run a subprocess in a pseudo terminal <code>~=0.6; sys_platform != \"win32\"</code> <code>0.7.0</code> ISC License (ISCL) <code>pycparser</code> C parser in Python <code>2.22</code> BSD-3-Clause <code>pydantic</code> Data validation using Python type hints <code>&gt;=1.10.12</code> <code>2.8.0</code> MIT License <code>pydantic-core</code> Core functionality for Pydantic validation and serialization <code>==2.20.0</code> <code>2.20.0</code> MIT <code>pygments</code> Pygments is a syntax highlighting package written in Python. <code>~=2.16</code> <code>2.18.0</code> BSD-2-Clause <code>pymdown-extensions</code> Extension pack for Python Markdown. <code>&gt;=9</code> <code>10.8.1</code> MIT License <code>pytest</code> pytest: simple powerful testing with Python <code>&gt;=7.4</code> <code>8.2.2</code> MIT <code>pytest-cov</code> Pytest plugin for measuring coverage. <code>&gt;=4.1</code> <code>5.0.0</code> MIT <code>pytest-randomly</code> Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.15</code> <code>3.15.0</code> MIT <code>pytest-xdist</code> pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=3.3</code> <code>3.6.1</code> MIT License <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> Dual License <code>pytz</code> World timezone definitions, modern and historical <code>&gt;=2015.7; python_version &lt; \"3.9\"</code> <code>2024.1</code> ? <code>pyyaml</code> YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.1</code> MIT <code>pyyaml-env-tag</code> A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License <code>regex</code> Alternative regular expression module, to replace re. <code>&gt;=2022.4</code> <code>2024.5.15</code> Apache Software License <code>requests</code> Python HTTP for Humans. <code>2.32.3</code> Apache-2.0 <code>rich</code> Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>13.7.1</code> MIT <code>ruamel-yaml</code> ruamel.yaml is a YAML parser/emitter that supports roundtrip preservation of comments, seq/map flow style, and map key order <code>&gt;=0.17.21</code> <code>0.18.6</code> MIT license <code>ruamel-yaml-clib</code> C version of reader, parser and emitter for ruamel.yaml derived from libyaml <code>&gt;=0.2.7; platform_python_implementation == \"CPython\" and python_version &lt; \"3.13\"</code> <code>0.2.8</code> MIT <code>ruff</code> An extremely fast Python linter and code formatter, written in Rust. <code>&gt;=0.0</code> <code>0.5.0</code> MIT <code>safety</code> Checks installed dependencies for known vulnerabilities and licenses. <code>&gt;=2.3</code> <code>3.2.3</code> MIT license <code>safety-schemas</code> Schemas for Safety tools <code>&gt;=0.0.2</code> <code>0.0.2</code> MIT license <code>semver</code> Python helper for Semantic Versioning (https://semver.org) <code>&gt;=2.13</code> <code>3.0.2</code> BSD <code>setuptools</code> Easily download, build, install, upgrade, and uninstall Python packages <code>&gt;=65.5.1</code> <code>70.2.0</code> MIT License <code>shellingham</code> Tool to Detect Surrounding Shell <code>&gt;=1.3.0</code> <code>1.5.4</code> ISC License <code>six</code> Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT <code>smmap</code> A pure Python implementation of a sliding window memory map manager <code>&lt;6,&gt;=3.0.1</code> <code>5.0.1</code> BSD <code>tomli</code> A lil' TOML parser <code>&gt;=2.0; python_version &lt; '3.11'</code> <code>2.0.1</code> ? <code>typer</code> Typer, build great CLIs. Easy to code. Based on Python type hints. <code>0.12.3</code> MIT License <code>types-markdown</code> Typing stubs for Markdown <code>&gt;=3.5</code> <code>3.6.0.20240316</code> Apache-2.0 license <code>types-pyyaml</code> Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.20240311</code> Apache-2.0 license <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.0.1; python_version &lt; \"3.11\"</code> <code>4.12.2</code> Python Software Foundation License <code>urllib3</code> HTTP library with thread-safe connection pooling, file post, and more. <code>&lt;3,&gt;=1.21.1</code> <code>2.2.2</code> MIT License <code>watchdog</code> Filesystem events monitoring <code>&gt;=2.0</code> <code>4.0.1</code> Apache-2.0 <code>wheel</code> A built-package format for Python <code>&lt;1.0,&gt;=0.23.0</code> <code>0.43.0</code> MIT License <code>zipp</code> Backport of pathlib-compatible object wrapper for zip files <code>&gt;=0.5</code> <code>3.19.2</code> ? <p>More credits from the author</p>"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2022, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> pdm_multirun<ul> <li> debug</li> <li> plugin</li> </ul> </li> </ul>"},{"location":"reference/pdm_multirun/","title":"Index","text":""},{"location":"reference/pdm_multirun/#pdm_multirun","title":"pdm_multirun","text":"<p>PDM Multirun package.</p> <p>A PDM plugin to run a command on multiple Python versions.</p> <p>Modules:</p> <ul> <li> <code>debug</code>           \u2013            <p>Debugging utilities.</p> </li> <li> <code>plugin</code>           \u2013            <p>PDM Multirun plugin.</p> </li> </ul>"},{"location":"reference/pdm_multirun/debug/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> debug","text":""},{"location":"reference/pdm_multirun/debug/#pdm_multirun.debug","title":"debug","text":"<p>Debugging utilities.</p> <p>Classes:</p> <ul> <li> <code>Environment</code>           \u2013            <p>Dataclass to store environment information.</p> </li> <li> <code>Package</code>           \u2013            <p>Dataclass describing a Python package.</p> </li> <li> <code>Variable</code>           \u2013            <p>Dataclass describing an environment variable.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>get_debug_info</code>             \u2013              <p>Get debug/environment information.</p> </li> <li> <code>get_version</code>             \u2013              <p>Get version of the given distribution.</p> </li> <li> <code>print_debug_info</code>             \u2013              <p>Print debug/environment information.</p> </li> </ul>"},{"location":"reference/pdm_multirun/debug/#pdm_multirun.debug.Environment","title":"Environment  <code>dataclass</code>","text":"<pre><code>Environment(\n    interpreter_name: str,\n    interpreter_version: str,\n    platform: str,\n    packages: list[Package],\n    variables: list[Variable],\n)\n</code></pre> <p>Dataclass to store environment information.</p> <p>Attributes:</p> <ul> <li> <code>interpreter_name</code>               (<code>str</code>)           \u2013            <p>Python interpreter name.</p> </li> <li> <code>interpreter_version</code>               (<code>str</code>)           \u2013            <p>Python interpreter version.</p> </li> <li> <code>packages</code>               (<code>list[Package]</code>)           \u2013            <p>Installed packages.</p> </li> <li> <code>platform</code>               (<code>str</code>)           \u2013            <p>Operating System.</p> </li> <li> <code>variables</code>               (<code>list[Variable]</code>)           \u2013            <p>Environment variables.</p> </li> </ul>"},{"location":"reference/pdm_multirun/debug/#pdm_multirun.debug.Environment.interpreter_name","title":"interpreter_name  <code>instance-attribute</code>","text":"<pre><code>interpreter_name: str\n</code></pre> <p>Python interpreter name.</p>"},{"location":"reference/pdm_multirun/debug/#pdm_multirun.debug.Environment.interpreter_version","title":"interpreter_version  <code>instance-attribute</code>","text":"<pre><code>interpreter_version: str\n</code></pre> <p>Python interpreter version.</p>"},{"location":"reference/pdm_multirun/debug/#pdm_multirun.debug.Environment.packages","title":"packages  <code>instance-attribute</code>","text":"<pre><code>packages: list[Package]\n</code></pre> <p>Installed packages.</p>"},{"location":"reference/pdm_multirun/debug/#pdm_multirun.debug.Environment.platform","title":"platform  <code>instance-attribute</code>","text":"<pre><code>platform: str\n</code></pre> <p>Operating System.</p>"},{"location":"reference/pdm_multirun/debug/#pdm_multirun.debug.Environment.variables","title":"variables  <code>instance-attribute</code>","text":"<pre><code>variables: list[Variable]\n</code></pre> <p>Environment variables.</p>"},{"location":"reference/pdm_multirun/debug/#pdm_multirun.debug.Package","title":"Package  <code>dataclass</code>","text":"<pre><code>Package(name: str, version: str)\n</code></pre> <p>Dataclass describing a Python package.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Package name.</p> </li> <li> <code>version</code>               (<code>str</code>)           \u2013            <p>Package version.</p> </li> </ul>"},{"location":"reference/pdm_multirun/debug/#pdm_multirun.debug.Package.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Package name.</p>"},{"location":"reference/pdm_multirun/debug/#pdm_multirun.debug.Package.version","title":"version  <code>instance-attribute</code>","text":"<pre><code>version: str\n</code></pre> <p>Package version.</p>"},{"location":"reference/pdm_multirun/debug/#pdm_multirun.debug.Variable","title":"Variable  <code>dataclass</code>","text":"<pre><code>Variable(name: str, value: str)\n</code></pre> <p>Dataclass describing an environment variable.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Variable name.</p> </li> <li> <code>value</code>               (<code>str</code>)           \u2013            <p>Variable value.</p> </li> </ul>"},{"location":"reference/pdm_multirun/debug/#pdm_multirun.debug.Variable.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Variable name.</p>"},{"location":"reference/pdm_multirun/debug/#pdm_multirun.debug.Variable.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre> <p>Variable value.</p>"},{"location":"reference/pdm_multirun/debug/#pdm_multirun.debug.get_debug_info","title":"get_debug_info","text":"<pre><code>get_debug_info() -&gt; Environment\n</code></pre> <p>Get debug/environment information.</p> <p>Returns:</p> <ul> <li> <code>Environment</code>           \u2013            <p>Environment information.</p> </li> </ul> Source code in <code>src/pdm_multirun/debug.py</code> <pre><code>def get_debug_info() -&gt; Environment:\n    \"\"\"Get debug/environment information.\n\n    Returns:\n        Environment information.\n    \"\"\"\n    py_name, py_version = _interpreter_name_version()\n    packages = [\"pdm-multirun\"]\n    variables = [\"PYTHONPATH\", *[var for var in os.environ if var.startswith(\"PDM_MULTIRUN\")]]\n    return Environment(\n        interpreter_name=py_name,\n        interpreter_version=py_version,\n        platform=platform.platform(),\n        variables=[Variable(var, val) for var in variables if (val := os.getenv(var))],\n        packages=[Package(pkg, get_version(pkg)) for pkg in packages],\n    )\n</code></pre>"},{"location":"reference/pdm_multirun/debug/#pdm_multirun.debug.get_version","title":"get_version","text":"<pre><code>get_version(dist: str = 'pdm-multirun') -&gt; str\n</code></pre> <p>Get version of the given distribution.</p> <p>Parameters:</p> <ul> <li> <code>dist</code>               (<code>str</code>, default:                   <code>'pdm-multirun'</code> )           \u2013            <p>A distribution name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A version number.</p> </li> </ul> Source code in <code>src/pdm_multirun/debug.py</code> <pre><code>def get_version(dist: str = \"pdm-multirun\") -&gt; str:\n    \"\"\"Get version of the given distribution.\n\n    Parameters:\n        dist: A distribution name.\n\n    Returns:\n        A version number.\n    \"\"\"\n    try:\n        return metadata.version(dist)\n    except metadata.PackageNotFoundError:\n        return \"0.0.0\"\n</code></pre>"},{"location":"reference/pdm_multirun/debug/#pdm_multirun.debug.print_debug_info","title":"print_debug_info","text":"<pre><code>print_debug_info() -&gt; None\n</code></pre> <p>Print debug/environment information.</p> Source code in <code>src/pdm_multirun/debug.py</code> <pre><code>def print_debug_info() -&gt; None:\n    \"\"\"Print debug/environment information.\"\"\"\n    info = get_debug_info()\n    print(f\"- __System__: {info.platform}\")\n    print(f\"- __Python__: {info.interpreter_name} {info.interpreter_version}\")\n    print(\"- __Environment variables__:\")\n    for var in info.variables:\n        print(f\"  - `{var.name}`: `{var.value}`\")\n    print(\"- __Installed packages__:\")\n    for pkg in info.packages:\n        print(f\"  - `{pkg.name}` v{pkg.version}\")\n</code></pre>"},{"location":"reference/pdm_multirun/plugin/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> plugin","text":""},{"location":"reference/pdm_multirun/plugin/#pdm_multirun.plugin","title":"plugin","text":"<p>PDM Multirun plugin.</p> <p>Classes:</p> <ul> <li> <code>MultirunCommand</code>           \u2013            <p>Run a command under multiple Python versions.</p> </li> </ul>"},{"location":"reference/pdm_multirun/plugin/#pdm_multirun.plugin.MultirunCommand","title":"MultirunCommand","text":"<p>               Bases: <code>Command</code></p> <p>Run a command under multiple Python versions.</p>"},{"location":"coverage/","title":"Coverage report","text":""}]}